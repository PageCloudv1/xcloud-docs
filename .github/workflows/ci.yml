name: 📚 xCloud Docs - Build & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [published]

jobs:
  lint-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📝 Lint markdown files
      uses: DavidAnson/markdownlint-cli2-action@v13
      with:
        globs: '**/*.md'
        config: '.markdownlint.json'

    - name: 🔗 Check markdown links
      uses: gaurav-nelson/github-action-markdown-link-check@v1
      with:
        use-quiet-mode: 'yes'
        use-verbose-mode: 'no'
        config-file: '.markdown-link-check.json'

  build-docs:
    runs-on: ubuntu-latest
    needs: lint-docs
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        # Check if it's a Docusaurus, GitBook, or VitePress project
        if [ -f "package.json" ]; then
          npm ci
        elif [ -f "mkdocs.yml" ]; then
          pip install mkdocs mkdocs-material
        elif [ -f "Gemfile" ]; then
          bundle install
        else
          echo "📋 Plain markdown documentation detected"
        fi

    - name: 🏗️ Build documentation
      run: |
        if [ -f "package.json" ] && grep -q "docusaurus\|vitepress\|gitbook" package.json; then
          npm run build
        elif [ -f "mkdocs.yml" ]; then
          mkdocs build
        elif [ -f "Gemfile" ]; then
          bundle exec jekyll build
        else
          echo "📄 Static markdown files - no build needed"
          mkdir -p dist/
          cp -r *.md dist/ || echo "No markdown files in root"
          cp -r docs/ dist/ || echo "No docs folder"
          cp -r examples/ dist/ || echo "No examples folder"
        fi

    - name: 📊 Generate documentation stats
      run: |
        echo "📈 Documentation Statistics:"
        echo "Total markdown files: $(find . -name '*.md' | wc -l)"
        echo "Total lines: $(find . -name '*.md' -exec cat {} \; | wc -l)"
        echo "API reference files: $(find . -path '*api*' -name '*.md' | wc -l)"
        echo "Tutorial files: $(find . -path '*tutorial*' -name '*.md' | wc -l)"

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: documentation-build
        path: |
          dist/
          build/
          _site/
          .vitepress/dist/
        retention-days: 30

  validate-content:
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Setup Python for content validation
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 📦 Install validation tools
      run: |
        pip install pyyaml jsonschema requests
        # Install vale for prose linting
        curl -sfL https://install.goreleaser.com/github.com/ValeLint/vale.sh | sh -s -- -b /usr/local/bin

    - name: ✅ Validate YAML frontmatter
      run: |
        python -c "
        import os
        import yaml
        import json
        
        errors = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.md'):
                    filepath = os.path.join(root, file)
                    try:
                        with open(filepath, 'r', encoding='utf-8') as f:
                            content = f.read()
                            if content.startswith('---'):
                                frontmatter = content.split('---')[1]
                                yaml.safe_load(frontmatter)
                    except Exception as e:
                        errors.append(f'{filepath}: {e}')
        
        if errors:
            print('❌ YAML frontmatter errors:')
            for error in errors:
                print(f'  {error}')
            exit(1)
        else:
            print('✅ All YAML frontmatter is valid')
        "

    - name: 🎨 Prose linting with Vale
      run: |
        if [ -f ".vale.ini" ]; then
          vale --config=.vale.ini .
        else
          echo "⚠️ No .vale.ini config found, skipping prose linting"
        fi

    - name: 🔍 Check for broken internal links
      run: |
        python -c "
        import os
        import re
        
        # Collect all markdown files
        md_files = []
        for root, dirs, files in os.walk('.'):
            for file in files:
                if file.endswith('.md'):
                    md_files.append(os.path.join(root, file))
        
        # Extract all internal links
        all_links = set()
        broken_links = []
        
        for filepath in md_files:
            with open(filepath, 'r', encoding='utf-8') as f:
                content = f.read()
                # Find markdown links
                links = re.findall(r'\[([^\]]+)\]\(([^)]+)\)', content)
                for text, link in links:
                    if not link.startswith(('http', 'mailto:', '#')):
                        all_links.add((filepath, link))
        
        # Check if linked files exist
        for source_file, link in all_links:
            link_path = os.path.join(os.path.dirname(source_file), link)
            if not os.path.exists(link_path):
                broken_links.append(f'{source_file} -> {link}')
        
        if broken_links:
            print('❌ Broken internal links found:')
            for link in broken_links:
                print(f'  {link}')
            exit(1)
        else:
            print('✅ All internal links are valid')
        "

  accessibility-check:
    runs-on: ubuntu-latest
    needs: build-docs
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-build
        path: dist/

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'

    - name: 📦 Install accessibility tools
      run: |
        npm install -g @axe-core/cli http-server

    - name: 🌐 Serve documentation
      run: |
        http-server dist/ -p 3000 &
        sleep 5

    - name: ♿ Run accessibility tests
      run: |
        axe http://localhost:3000 --exit
      continue-on-error: true

  deploy-preview:
    runs-on: ubuntu-latest
    needs: [build-docs, validate-content]
    if: github.event_name == 'pull_request'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-build
        path: dist/

    - name: 🚀 Deploy to Netlify Preview
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions - PR #${{ github.event.number }}"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-docs, validate-content, accessibility-check]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 📤 Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: documentation-build
        path: dist/

    - name: 🚀 Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./dist
        cname: docs.xcloud.dev

    - name: 🚀 Deploy to Netlify Production
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        production-deploy: true
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Production deploy from main branch"
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}

    - name: 📢 Notify deployment
      if: success()
      run: |
        echo "🎉 Documentation deployed successfully!"
        echo "🌐 GitHub Pages: https://pagecloudv1.github.io/xcloud-docs"
        echo "🌐 Netlify: https://docs.xcloud.dev"

  search-index:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔍 Update Algolia search index
      run: |
        if [ ! -z "${{ secrets.ALGOLIA_APP_ID }}" ]; then
          curl -X POST \
            "https://${{ secrets.ALGOLIA_APP_ID }}-dsn.algolia.net/1/indexes/xcloud_docs/clear" \
            -H "X-Algolia-API-Key: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}" \
            -H "X-Algolia-Application-Id: ${{ secrets.ALGOLIA_APP_ID }}"
          
          # Re-index documentation
          curl -X POST \
            "https://${{ secrets.ALGOLIA_APP_ID }}-dsn.algolia.net/1/indexes/xcloud_docs/batch" \
            -H "X-Algolia-API-Key: ${{ secrets.ALGOLIA_ADMIN_API_KEY }}" \
            -H "X-Algolia-Application-Id: ${{ secrets.ALGOLIA_APP_ID }}" \
            -H "Content-Type: application/json" \
            --data-binary @search-index.json || echo "Search index update skipped"
        else
          echo "⚠️ Algolia credentials not configured, skipping search index update"
        fi